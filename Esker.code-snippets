{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	///////* Looping form table controls *///////
	"SOP - Looping materials on server side": 
	{
		"description": "Looping materials on server side",
		"prefix": ["for","loop","query","server query", "esker"],
		"body": [
			"var materialsTable = Data.GetTable(\"Product_List__\");",
			"var itemCount = materialsTable.GetItemCount();\n",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = materialsTable.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(${1:field});",
			"\titem.SetValue(\"${2:field}\", ${3:value});",
			"}"
		]
	},

	"SOP - Looping materials on client side": 
	{
		"description": "Looping materials on client side",
		"prefix": ["for","loop","query","client query", "esker"],
		"body": [
			"var itemCount = Controls.Product_List__.GetItemCount();",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = Controls.Product_List__.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(\"${1:field}\");",
			"\tvar ${2:field} = item.SetValue(\"${2:field}\");",
			"}"
		]
	},

	"AP - Looping items on server side":
	{
		"description": "Looping line items on server side",
		"prefix": ["for","loop","query","server query", "esker"],
		"body": [
			"var lineItemsTable = Data.GetTable(\"LineItems__\");",
			"var itemCount = lineItemsTable.GetItemCount();\n",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = lineItemsTable.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(${1:field});",
			"\titem.SetValue(\"${2:field}\", ${3:value});",
			"}"
		]
	},

	"AP - Looping items on client side": 
	{
		"description": "Looping line items on client side",
		"prefix": ["for","loop","query","client query", "esker"],
		"body": [
			"var itemCount = Controls.LineItems__.GetItemCount();",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = Controls.LineItems__.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(\"${1:field}\");",
			"\tvar ${2:field} = item.SetValue(\"${2:field}\");",
			"}"
		]
	},

	///////* Queries *///////

	
	Sys.Helpers.Database.AddOrModifyTableRecord (table, filter, attributes)
	
	var filter = "(&(Z_CUITEmisor__=" + ObjResponse.CUITEmisor + ")(Z_codTipoCmp__="+ ObjResponse.codTipoCmp +")(Z_nroComp__=" + nroComp + ")(Z_ptoVta__=" + ptoVta + "))";
                                var attributes = [
                                    { "name": "CompanyCode__", "value": mappedValue.companyCode },
                                    { "name": "FormField__", "value": mappedValue.formField },
                                    { "name": "ExtractedValue__", "value": mappedValue.extractedValue },
                                    { "name": "BusinessValue__", "value": mappedValue.businessValue }
                                ];
								Sys.Helpers.Database.AddOrModifyTableRecord(CrossReference.customTableName, filter, attributes);
								
	
	


	Sys.Helpers.Database.GetFirstRecordResult (table, filter, attributes, sortorder)

	var filter = "(&(Number__=" + itemNumber + ")(Sales_organization__=" + salesOrganization + ")(Distribution_channel__=" + distributionChannel + "))";

	var attributes = "Z_ProdHierarchy__";
	var result = Sys.Helpers.Database.GetFirstRecordResult("SO - Materials__", filter, attributes);
	if (result)
	{
		var prodHierarchy = result.GetValue_String("Z_ProdHierarchy__", 0);
		productItem.SetValue("Z_ProdHierarchy__", prodHierarchy);
		Log.Info("Prod hierarchy", prodHierarchy, "found for item number", itemNumber);
	}
	else
	{
		Log.Warn("No result found.");
	}




	Sys.Helpers.Database.ModifyTableRecord (table, filter, attributes)
	var tableName = "Z_ComprobantesFEC__";

						var filter = "(&(Z_CUITEmisor__=" + vars.GetValue_String("Z_CUIT_Proveedor__", 0)
									 + ")(Z_codTipoCmp__=" + codTipoCmp
									 +")(Z_nroComp__=" + vars.GetValue_String("Z_NumeroFacturaExtraido__", 0) 
									 + ")(Z_ptoVta__=" + Sys.Helpers.SAP.BuildItemNumber(vars.GetValue_String("Z_Centro__", 0), 5, 1) + "))";

						var itemFieldsToUpdate = [{name: "Z_FechaPago__" ,	value: PaymentDetails.paymentDate }];
						ModifyTableRecord(tableName, filter, itemFieldsToUpdate);




	Sys.Helpers.Database.RemoveTableRecord

	var tableName = "Z_TaxCodeKeywords__";
							var filter = "(&(KeyWord__=" + itemData.KeyWord__ + ")(CompanyCode__=" + itemData.CompanyCode__ + ")(VendorNumber__=" + itemData.VendorNumber__ + ")(TaxCode__=" + itemData.TaxCode__ + "))";
							Sys.Helpers.Database.RemoveTableRecord(tableName, filter);

}