{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	
	///////* Looping form table controls *///////
	"SOP - Looping materials on server side": 
	{
		"description": "Looping materials on server side",
		"prefix": ["for","loop","query","server query", "esker"],
		"body": [
			"var materialsTable = Data.GetTable(\"Product_List__\");",
			"var itemCount = materialsTable.GetItemCount();\n",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = materialsTable.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(${1:field});",
			"\titem.SetValue(\"${2:field}\", ${3:value});",
			"}"
		]
	},

	"SOP - Looping materials on client side": 
	{
		"description": "Looping materials on client side",
		"prefix": ["for","loop","query","client query", "esker"],
		"body": [
			"var itemCount = Controls.Product_List__.GetItemCount();",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = Controls.Product_List__.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(\"${1:field}\");",
			"\tvar ${2:field} = item.SetValue(\"${2:field}\");",
			"}"
		]
	},

	"AP - Looping items on server side":
	{
		"description": "Looping line items on server side",
		"prefix": ["for","loop","query","server query", "esker"],
		"body": [
			"var lineItemsTable = Data.GetTable(\"LineItems__\");",
			"var itemCount = lineItemsTable.GetItemCount();\n",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = lineItemsTable.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(${1:field});",
			"\titem.SetValue(\"${2:field}\", ${3:value});",
			"}"
		]
	},

	"AP - Looping items on client side": 
	{
		"description": "Looping line items on client side",
		"prefix": ["for","loop","query","client query", "esker"],
		"body": [
			"var itemCount = Controls.LineItems__.GetItemCount();",
			"for (var i = 0; i < itemCount; i++)",
			"{",
			"\t$0var item = Controls.LineItems__.GetItem(i);",
			"\tvar ${1:field} = item.GetValue(\"${1:field}\");",
			"\tvar ${2:field} = item.SetValue(\"${2:field}\");",
			"}"
		]
	},

	///////* Queries *///////
	
	"Generic API Common Query":
	{
		"description": "Common query example for server and client side.",
		"prefix": ["query","common query", "esker", "generic api"],
		"body": [
			"//Required GenericAPI.Query parameters",
			"var queryGenericAPICallback = function(result, error)",
			"{",
			"\tif (error)",
			"\t{",
			"\t\tLog.Error(\"[CUSTOMIZATION RQ] Query on table '\" + tableName + \"' failed. Details: \" + JSON.stringify(error));",
			"\t}",
			"\telse if (result.length == 0)",
			"\t{",
			"\t\tLog.Warn(\"[CUSTOMIZATION RQ] Query on table '\" + tableName + \"' without result. filer: \" + filter);",
			"\t}",
			"\telse",
			"\t{",
			"\t\tfor(var i = 0; i < result.length; i++)",
			"\t\t{",
			"\t\t\tvar ${2:attribute1} = result[i][\"${2:attribute1}\"];",
			"\t\t}",
			"\t}",
			"};",
			"",
			"var tableName = \"${1:tableName}\";",
			"var attributes = [\"${2:attribute1}\", \"${3:attribute2}\"];",
			"var filter = ${4:\"\"};",
			"",
			"//Optional GenericAPI.Query parameters",
			"var sortOrder = ${5:\"\"};",
			"var maxRecordCount =${6:100};",
			"var options = ${7:null};",
			"",
			"Sys.GenericAPI.Query(tableName, filter, attributes, queryGenericAPICallback, sortOrder, maxRecordCount, options);"
		]
	},

	"Process Query Example":
	{
		"description": "Example structure of the process instances query. Only server side.",
		"prefix": ["process query","instances queries", "message queries"],
		"body": [
			"var processName = \"${1:processName}\"",
			"var filter = \"${2:filter}\"",
			"var query = Process.CreateQueryAsProcessAdmin();",
			"query.SetSpecificTable(\"CDNAME#\" + processName);",
			"query.AddAttribute(\"${3:attribute1}\");",
			"query.SetSearchInArchive({4:boolean});",
			"query.SetFilter(filter);",
			"",
			"if(query.MoveFirst())",
			"{",
				"\tvar eodTransport = query.MoveNext();",
				"\t",
				"\tif(!eodTransport)",
				"\t{",
					"\t\tLog.Warn(\"[CUSTOMIZATION RQ] MoveNext to '\" + processName + \"' failed: \" + query.GetLastErrorMessage());",
				"\t}",
				"\t",
				"\twhile(eodTransport)",
				"\t{",
					"\t\tvar vars = eodTransport.GetUninheritedVars();",
					"\t\tvar externalVariables = eodTransport.GetExternalVars();",
					"\t\t",
					"\t\tvar ${3:attribute1} = vars.GetValue_String(\"${3:attribute1}\", 0);",
					"\t\tvar ${5:externalVariable1} = externalVariables.GetValue_String(\"${5:externalVariable1}\", 0);",
					"\t\t",
					"\t\t//Do the corresponding logic for each record here.",
					"\t\t",
					"\t\tvar eodTransport = query.MoveNext();",
				"\t}",
			"}",
			"else",
			"{",
				"\tLog.Warn(\"[CUSTOMIZATION RQ] MoveFirst to '\" + processName + \"' failed. Error message: \" + query.GetLastErrorMessage());",
			"}"
		]	
	},
	
	"AddOrModifyTableRecord":
	{
		"description": "Add or modify a table record in server side.",
		"prefix": ["addormodify","update record", "modify record", "add record"],
		"body": [
			"var tableName = \"${1:tableName}\"",
			"var filter = \"${2:filter}\"",
			"var attributes = {",
			"\t{ \"name\": \"${3:tableFieldName1}\", \"value\": ${4:value}}",
			"};",
			"",
			"Sys.Helpers.Database.AddOrModifyTableRecord(tableName, filter, attributes);"
		]
	},

	"GetFirstRecordResult":
	{
		"description": "Get first record result in server side",
		"prefix": ["gerfirstrecord","get first record", "first record"],
		"body": [
			"var tableName = \"${1:tableName}\"",
			"var filter = \"${2:filter}\"",
			"",
			"var dbResult = Sys.Helpers.Database.GetFirstRecordResult(tableName, filter);",
			"",
			"if(dbResult)",
			"{",
			"\tvar ${3:field} = dbResult.GetValue_String(\"${3:field}\", 0);",
			"}",
			"else",
			"{",
			"\tLog.Warn(\"[CUSTOMIZATION RQ] No result found. Table: \" + tableName + \" Filter: \" + filter);",
			"}",
		]
	},

	"RemoveTableRecord":
	{
		"description": "Remove table records.",
		"prefix": ["removetablerecord","remove record", "delete record"],
		"body": [
			"var tableName = \"${1:tableName}\"",
			"var filter = \"${2:filter}\"",
			"",
			"Sys.Helpers.Database.RemoveTableRecord(tableName, filter);",
		]
	}
}